##########################
####### checking the memory utilization using 
####### below module
'''
import tracemalloc
tracemalloc.start()
the operation 
current,peak = tracemalloc.get_traced_memory()
tracemalloc.stop()
print('memory usage :',current ,peak)
'''

def memory_usage(orig_func):
	import tracemalloc
	def wrapper(*args,**kwargs):
		tracemalloc.start()
		result=orig_func(*args,**kwargs)
		current,peak = tracemalloc.get_traced_memory()
		tracemalloc.stop()
		print('The memory usage of {} is current: {} peak: {}'.format(orig_func.__name__,current,peak))
		return result
	return wrapper
		

#####################
######## for timing the operation use module timeit
'''
import timeit	
print(timeit.timeit('fibonacci(35)', globals=globals(), number=1))
'''
'''Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
'''

def timer(orig_func):
	import time
	
	def wrapper(*args,**kwargs):
		t1=time.time()
		result = orig_func(*args,**kwargs)
		t2=time.time()-t1
		print('{} ran in : {} sec'.format(orig_func.__name__,t2))
		return result
		
	return wrapper

##import tracemalloc

# tracemalloc.start()
# multiple3=[row*3 for row in range(1,1000)]
# multiple5=[row*5 for row in range(1,1000)]

# ## convert list into sets and union them to remove the dupicates
# multipleSet=set(multiple3).union(set(multiple5))

# #print(multipleSet)
# print(sum(multipleSet))
# current,peak = tracemalloc.get_traced_memory()
# tracemalloc.stop()
# print('memory usage :',current ,peak)

def multigenerator(ip,maxVal):
	for i in range(1,int(maxVal/ip)+2):
		yield i*ip

@memory_usage
@timer
def problem1(ipOne,ipTwo,maxVal):
	'''
	ipOne -- natural number
	ipTwo -- second natural number
	maxVal -- max val for the multiples
	'''
	## generator function for multipler of ipOne,ipTwo
	ipOnegen=multigenerator(ipOne,maxVal)
	ipTwogen=multigenerator(ipTwo,maxVal)
	ipOnemul,ipOnesum,ipTwomul,ipTwosum=0,0,0,0
	while maxVal > ipOnemul:
		ipOnemul=next(ipOnegen)
		if ipOnemul%ipTwo==0 or ipOnemul>=maxVal:
			pass
		else:
			ipOnesum+=ipOnemul
	
	while maxVal > ipTwomul:
		ipTwomul = next(ipTwogen)
		if ipTwomul<maxVal:
			ipTwosum+=ipTwomul
	return ipOnesum+ipTwosum
		

print(problem1(3,5,1000))



#print('memory usage :',current ,peak)
'''Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
find the sum of the even-valued terms.
'''

# generator for fibonacci
def myfibgen():
	a,b=0,1
	while True:
		a,b=b,a+b
		yield b

		
def problem2(fibmax):
	'''
	Finds the sum of even Fibonacci number upto fibmax
	fibmax : the max value of Fibonacci sequence that needs to be generated
	'''
	fibgen=myfibgen()
	fibval=0
	fibEvenSum=0
	while fibval<=fibmax:
		fibval=next(fibgen)
		if fibval<=fibmax and fibval%2==0:
			fibEvenSum+=fibval
	return fibEvenSum
	
### running the function
#print(problem2(4000000))
			
'''Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?
'''			

## need a function to check if a number is prime.

def primecheck(myNum):
	import math
	if myNum==2:
		return True
	elif myNum%2==0 or myNum==1:
		return False
	x=int(math.sqrt(myNum))
	if x%2==0:
		strtno=x+1
	else:
		strtno=x
	for i in range(strtno,1,-2):
		if myNum%i==0:
			return False
	return True




def problem3(aNum):
	if primecheck(aNum):
		return aNum
	else :
		x=int(math.sqrt(aNum))
		if x%2==0:
			strtno=x+1
		else:
			strtno=x
		for lpf in range(strtno,1,-2):
			if primecheck(lpf) and aNum%lpf==0:
				return lpf

##print(primecheck(600851475143))
##print(problem3(600851475143))
		
'''Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.
'''

def palindromecheck(aNum):
	if str(aNum)== str(aNum)[::-1]:
		return True
	else:
		return False
		
def problem4(noDigits):
	'''
	noDigits : no of digits to get the largest palindrome by multiplying two noDigits numbers
	returns the largest palindrome
	'''
	#largest n digit no
	maxNo=10**(noDigits)-1
	minNo=10**(noDigits-1)
	maxPalin=0
	
	for i in range(maxNo,minNo,-1):
		for j in range(minNo,maxNo,1):
			prod=i*j
			if palindromecheck(prod) and prod>maxPalin:
				maxPalin=prod
	return maxPalin
				
#print(problem4(3))

'''Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
'''

def divisibilitycheck(maxNo,factNo):
	while factNo>1:
		if maxNo%factNo==0:
			factNo=factNo-1
		else:
			return False
	return True

def problem5(factNo):
	import math
	import functools
	#minPosNo=math.factorial(factNo//2)
	# better starting number
	primeList=[]
	for no in range(1,factNo,1):
		if primecheck(no):
			primeList.append(no)
	print (primeList)
	minPosNo=functools.reduce(lambda a,b : a*b,primeList)
	print(minPosNo)
	for minDiv in range(minPosNo,math.factorial(factNo)):
		if divisibilitycheck(minDiv,factNo):
			return minDiv

#print(problem5(20))


'''problem6
The sum of the squares of the first ten natural numbers is,

1^2 + 2^2 + ... + 10^2 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
'''

def problem6(firstNNum):
	#sum of natural no n(n+1)/2
	sumofN=firstNNum*(firstNNum+1)//2
	sumsq=sumofN*sumofN
	#sum of squares of n natural no 
	sumofSqrs=firstNNum*(firstNNum+1)*(2*firstNNum+1)//6
	return sumsq-sumofSqrs
	
#print(problem6(100))

'''problem7
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
'''
import itertools
def problem7(nthPrime):
	oddcounts=itertools.count(3,2)
	primeCounter=1
	primeNo=2
	while primeCounter<nthPrime:
		candi=next(oddcounts)
		if primecheck(candi):
			primeCounter=primeCounter+1
			primeNo=candi
	return primeNo
	
#print(problem7(10001))

'''problem8
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843
8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557
6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749
3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776
6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397
5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474
8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586
1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408
0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606
0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
'''	

teststring='7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

import functools

def problem8(adjDigits,teststring):
	maxProduct=0
	for i in range(0,len(teststring)-adjDigits,1):
		substr=teststring[i:i+adjDigits]
		alist=list(substr)
		product=functools.reduce(lambda a,b : int(a)*int(b),alist)
		if product>maxProduct:
			maxProduct=product
	return maxProduct
	
#print(problem8(13,teststring))

'''problem9
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
'''

def problem9():
    # Ensure a < c
    for c in range(2, 1000):
        for a in range(1, c):
            # Ensure a + b + c == 1000.  Since a is counting up, the first
            # answer we find should have a <= b.
            b = 1000 - c - a

            # Ensure Pythagorean triple
            if a**2 + b**2 == c**2:
                print("a = %d, b = %d, c = %d.  abc = %d" % (a, b, c, a * b * c))
                return

'''problem10
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.
'''

def problem10(maxNum):
	primeSum=2
	if maxNum>3:
		for aNum in range(3,maxNum,2):
			if primecheck(aNum):
				primeSum+=aNum
	return primeSum

#print(problem10(2000000))


'''problem11
In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
'''

gridbox="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

parsed = [elements.split() for elements in gridbox.strip().split("\n")] 
#print(parsed)

# upDirection(row,column,aNum) and returns the product of aNum of elements 
def upDirection(row,column,aNum):
	'''
	returns product of aNum no of elements up direction
	row,column: indicates position of element to start from the search
	aNum: no of elements for which the product is to be calculated.
	'''
	print('upDirection')
	prd=1
	#print('row ',row,'aNum ',aNum)
	if row<aNum-1:
		prd=0
	else:
		#print('inside the else')
		for i in range(row,row-aNum,-1):
			print('elements ',parsed[i][column])
			prd=prd*int(parsed[i][column])
	return prd

def downDirection(row,column,aNum):
	'''
	returns product of aNum no of elements down direction
	row,column: indicates position of element to start from the search
	aNum: no of elements for which the product is to be calculated.
	'''
	print('downDirection')
	prd=1
	if len(parsed)-row<aNum:
		prd=0
	else:
		for i in range(row,aNum,1):
			print('element ',parsed[i][column])
			prd=prd*int(parsed[i][column])
	return prd

def leftDirection(row,column,aNum):
	'''
	returns product of aNum no of elements left direction
	row,column: indicates position of element to start from the search
	aNum: no of elements for which the product is to be calculated.
	'''
	print('leftDirection')
	prd=0
	import functools
	#print('row ',row,'aNum ',aNum)
	if aNum-1>column:
		prd=0
	else:
		#print('inside the else ','aNum-1',aNum-1,' column ',column)
		partlist=parsed[row][column-(aNum-1):column]
		print('elements ',partlist)
		prd=functools.reduce(lambda a,b : int(a)*int(b),partlist)
	return prd

def rightDirection(row,column,aNum):
	'''
	returns product of aNum no of elements left direction
	row,column: indicates position of element to start from the search
	aNum: no of elements for which the product is to be calculated.
	'''
	print('rightDirection')
	prd=0
	import functools
	print('row ',row,'aNum ',aNum)
	if (len(parsed[row])-column)<aNum:
		prd=0
	else:
		partlist=parsed[row][column:column+aNum]
		print('elements ',partlist)
		prd=functools.reduce(lambda a,b : int(a)*int(b),partlist)
	return prd

def diagRDirection(row,column,aNum):
	'''
	returns product of aNum no of elements diagonally right down
	row,column: indicates position of element to start from the search
	aNum: no of elements for which the product is to be calculated.
	'''
	prd=1
	print('diag Right Direction')
	if (len(parsed)-(row+1))<aNum or (len(parsed[row])-(column+1))<aNum :
		prd=0
	else:
		for i,j in zip(range(row,row+aNum,1),range(column,column+aNum,1)):
				print('element is ',parsed[i][j])
				prd=prd*int(parsed[i][j])
	return prd

def diagLDirection(row,column,aNum):
	'''
	returns product of aNum no of elements diagonally left down
	row,column: indicates position of element to start from the search
	aNum: no of elements for which the product is to be calculated.
	'''
	prd=1
	print('diag Left Direction')
	if (len(parsed)-(row+1))<aNum or (column+1)<aNum :
		prd=0
	else:
		for i,j in zip(range(row,row+aNum,1),range(column,column-aNum,-1)):
				print('element is ',parsed[i][j])
				prd=prd*int(parsed[i][j])
	return prd
	
#print(upDirection(3,0,4))
#print(rightDirection(0,16,4))
#print(diagRDirection(4,4,4))
#print(diagLDirection(4,4,4))

def problem11(aNum,parsed):
	'''
	parsed : multi dimensional list
	aNum   : no of times to multiply
	'''
	max_prd=0
	upPrd=0
	downPrd=0
	leftPrd=0
	rightPrd=0
	diagPrd=0
	for row in range(0,len(parsed)):
		# for the first row further operations
		for colmn in range(0,len(parsed[row])):
			# cal product in up direction
			upPrd=int(upDirection(row,colmn,aNum))
			rightPrd=int(rightDirection(row,colmn,aNum))
			diagRPrd=int(diagRDirection(row,colmn,aNum))
			diagLPrd=int(diagLDirection(row,colmn,aNum))
			max_num=max(upPrd,rightPrd,diagRPrd,diagLPrd)
			if max_num>max_prd:
				max_prd=max_num
			
	return max_prd
				
#print(problem11(4,parsed))

'''problem12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

#generator for sum of n natural numbers
def returnSum():
	i=1
	while True:
		yield i*(i+1)//2
		i+=1


##returns the count of factors of a number
from functools import reduce
def returnFactors(n):    
    return len(reduce(list.__add__,([i, n//i] for i in range(1, int(pow(n, 0.5) + 1)) if n % i == 0)))
#print(returnFactors(10))
	
def problem12(factCount):
	#returns a triangle number
	mysum=returnSum()
	noOfFactors=0
	while noOfFactors<=factCount:
		mynum=next(mysum)
		noOfFactors=returnFactors(mynum)
	return mynum,noOfFactors
	
#print(problem12(500))

'''
Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

'''

fiftyDigDels="""37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690"""

#first_10_digits=[int(elements) for elements in fiftyDigDels.split("\n")]
#print(str(sum(first_10_digits)))
#print(str(sum(first_10_digits))[:10]) ## first 10 digits 

'''problem14
The following iterative sequence is defined for the set of positive integers:

n → n/2 (n is even)
n → 3n + 1 (n is odd)

Using the rule above and starting with 13, we generate the following sequence:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.
 Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
Which starting number, under one million, produces the longest chain?
NOTE: Once the chain starts the terms are allowed to go above one million.
'''

countz=1
def Collatz1(start):
	global countz
	if start==1:
		return 'end'
	elif start%2==0:
		print('no is ',start//2)
		countz=countz+1
		Collatz1(start//2)
	else:
		print('no is ',3*start+1)
		countz=countz+1
		Collatz1(3*start+1)
	return countz

#print(withoutMem(13))

############### recursive way of achieving the above problem1
def Collatz2(start):
	if start==1:
		return 1
	elif start%2==0:
		return Collatz2(start//2)+1
	else:
		return Collatz2(3*start+1)+1

#print(Collatz2(13))

######## using url cache from functools

@functools.lru_cache(maxsize=None)
def Collatz3(start):
	if start==1:
		return 1
	elif start%2==0:
		return Collatz3(start//2)+1
	else:
		return Collatz3(3*start+1)+1

############### recursive way with cache in function defination of achieving the above problem1
def Collatz4(start,memo={}):
	if not start in memo:
		if start==1:
			return 1
		elif start%2==0:
			memo[start]=Collatz4(start//2)+1
		else:
			memo[start]=Collatz4(3*start+1)+1
	return memo[start]
@timer
@memory_usage
def problem14(maxNum):
	maxlen,num=0,0
	for x in range(maxNum,1,-1):
		mylen=Collatz4(x)
		if mylen>maxlen:
			maxlen,num=mylen,x
	return num

#print(problem14(1000000))

#sep,apr,jun,nov - 30
months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
No_of_days=[31,28,31,30,31,30,31,31,30,31,30,31]
days=['Mon','Tue','Wed','Thu','Fri','Sat','Sun']

##start_date = 01-jan-1900 -- Monday
#leap year = divisible by only 4 or 100 and 4 , not if divisible only be 100

#How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)? 

def problem19():
	themonth=0
	thedayofmonth=1
	thedayofweek=0


'''problem18
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

3
7 4
2 4 6
8 5 9 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
'''

test2='''75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'''

#### node class
class node(object):
	def __init__(self,position,value):
		'''
		position : gives the position of the node wrt to the test string as a tuple
		value    : gives the value of the node
		'''
		self.value=value
		self.position=position
	
	def getPosition(self):
		return self.position
	
	def getvalue(self):
		return self.value
		
	def getNodeHash(self):
		return hash(str(self.position)+str(self.value))
	
	def __str__(self):
		return 'P:'+str(self.position)+' V:'+str(self.value)
	
	


class edge(object):
	def __init__(self,src,dest):
		'''src and dest are nodes'''
		self.src = src
		self.dest = dest
	
	def getSource(self):
		return self.src
	
	def getDestination(self):
		return self.dest
	#return the destination nodes value as the weight
	def getWeight(self):
		return self.dest.getvalue()
		
	def __str__(self):
		return (self.src.getPosition(),)+'->'+(self.dest.getPosition(),)

class Diagraph(object):
	
	'''the edges is a dict mapping node to a list of its destination'''
	def __init__(self):
		self.edges = {}
	
	'''Adds the given node as a key to the dict named edges '''	
	def addNode(self,node):
		if node in self.edges:
			raise ValueError('Duplicate node')
		else:
			self.edges[node]=[]
	
	'''addEdge accepts and edge class object checks if source and destination node are present in the graph '''		
	def addEdge(self,edge):
		src = edge.getSource()
		dest = edge.getDestination()
		if not (src in self.edges and dest in self.edges):
			raise ValueError('Node not in graph')
		self.edges[src].append(dest)
	
	'''getChildrenof returns  all the children of the node'''	
	def getChildrenof(self,node):
		return self.edges[node]
	
	'''to check whether a node is present in the graph or not'''	
	def hasNode(self,node):
		return node in self.edges
	
	'''rootNode returns the root node i.e node at position (0,0)'''	
	def rootNode(self):
		for  keys in self.edges:
			return keys if keys.getPosition()==(0,0) else 'No Root node for this graph'
	

def createmygraph(testString):
	'''input is a multi-line string'''
	
	#create a list of lists from the string
	listofLists=[ list(map(int,elements.split())) for elements in testString.strip().split("\n")]
	y = Diagraph()
	nodeList = []
	
	# create all the nodes and store it in a list nodeList
	for i in range(len(listofLists)):
		for j in range(len(listofLists)):
			if i<=j:
				mynode=node((j,i),listofLists[j][i])
				nodeList.append(mynode)
				y.addNode(mynode)
	
	# create all the edges
	for srcNode in nodeList:
	# iterate through all the nodes again and form a logic add the edges
		for destNode in nodeList:
			#to add the immediate down node eg : add 7 (1,0) to 3 (0,0) , add 2 (2,0) to 7 (1,0)
			if srcNode.getPosition()[0]==destNode.getPosition()[0]-1 and srcNode.getPosition()[1]==destNode.getPosition()[1]-1:
				y.addEdge(edge(srcNode,destNode))
			#to add the bottom right node eg :add 4 (1,1) to 3 (0,0) 
			if srcNode.getPosition()[0]==destNode.getPosition()[0]-1 and srcNode.getPosition()[1]==destNode.getPosition()[1]:
				y.addEdge(edge(srcNode,destNode))
	
	return y	

def printPath(path):
    ''' path is a list of node objects'''
    result=''
    for i in range(len(path)):
        result = result +'-->'+str(path[i])
    return result

def breathfirstalgo(graph,tempPaths,finalPath):
	## iterates over all the lists inside the tempPaths and checks if there are child nodes to its last node.
	condList=[graph.getChildrenof(apartList[-1]) for apartList in tempPaths if graph.getChildrenof(apartList[-1])]

	tempL=[]
	if condList:
		
		for partialList in tempPaths:
			#get the children of the last element of partialList
			allchild=graph.getChildrenof(partialList[-1])
			
			if allchild:
				noOfChild=len(allchild)
				#create noOfChild copies of the partialList
				newlist=[partialList[:] for _ in range(noOfChild)]		
				#append the a child element to the new list
				for i in range(noOfChild):
					newlist[i].append(allchild[i])

				#append each list to the temp list tempL
				for alist in newlist:
					tempL.append(alist)
				
			else:
				pass
				
		#after completion of the for loop i.e iterate through 1 level
		return breathfirstalgo(graph,tempL,finalPath)
	else:
		#append all the lists from tempPaths to finalPath that will be returned
		for completePath in tempPaths:
			finalPath.append(completePath)
		return finalPath
		
mygraph=createmygraph(test2)
print('The graph object is ',mygraph)
print('The root node is ',mygraph.rootNode())
print(mygraph)
all_list=breathfirstalgo(mygraph,tempPaths=[[mygraph.rootNode()]],finalPath=[])

print('alllist is ')
max_sum=0
for partlist in all_list:
	pathSum=0
	for nodes in partlist:
		pathSum+=nodes.getvalue()
	if pathSum>max_sum:
		max_sum=pathSum
print(max_sum)
	
'''problem21
Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.

For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

Evaluate the sum of all the amicable numbers under 10000.

'''

import math	
from functools import reduce
def returnallFactors(n):	
	try:
		return reduce(list.__add__,([i, n//i] for i in range(1, int(math.sqrt(n))) if n % i == 0))
	except:
		return []
		
def returnfacts(n):
	try:
		alist=reduce(list.__add__,([i, n//i] for i in range(1, int(math.sqrt(n))+1) if n % i == 0))
		alist.remove(n)
		return set(alist)
	except:
		return []

def problem21(uptonum):
	mainSum=set()
	for anum in range(1,uptonum,1):
		FactSum=sum(returnfacts(anum))
		secFactSum=sum(returnfacts(FactSum))
		if anum==secFactSum and anum!=FactSum:
				mainSum.add(anum)
				if FactSum<uptonum:
					mainSum.add(FactSum)
	return sum(mainSum)

#print(problem21(10001))

'''problem22
Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names,
 begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, 
 multiply this value by its alphabetical position in the list to obtain a name score.
For example, when the list is sorted into alphabetical order, COLIN, 
which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.
 So, COLIN would obtain a score of 938 × 53 = 49714.

What is the total of all the name scores in the file?
'''


filename =r'C:\Users\tcs759516\Downloads\p022_names.txt'
file = open(filename, 'r')
message = file.read()
file.close()
listOfNames=message.replace('"','').split(',')
listOfNames.sort()
#print(listOfNames)
#print(dir(listOfNames))
#print(listOfNames.index('COLIN')+1)

finalSum=0
for idx,aName in enumerate(listOfNames):
	alphaValue=sum([ord(aChar)-64 for aChar in aName])
	finalSum+=alphaValue*(idx+1)
#print(finalSum)

'''problem23
A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. 
For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers
 is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers.
 However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number 
 that cannot be expressed  as the sum of two abundant numbers is less than this limit.
Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
'''

#checks if a del is abundant or not
abd_memo = {}
def abundantCheck(num):
	if not num in abd_memo:
		x=True if sum(returnfacts(num))>num else False
		abd_memo[num]=x
		return x
	else:
		return abd_memo[num]

### a generator to return all the splits of a number
def returnSplitTwo(aNum):
	i=1
	while i<=aNum//2:
		yield (i,aNum-i)
		i+=1
			

def problem23():
	sum=0
	for testNum in range(28123):
		spGen=returnSplitTwo(testNum)
		flg=1
		for split1,split2 in spGen:
			if abundantCheck(split1) and abundantCheck(split2):
				flg=0
				break
			else:
				flg=1
		if flg==1:
			sum+=testNum
	return sum
			
	
#print('The sum is ',problem23())
			
'''problem24
A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:

012   021   102   120   201   210

What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
'''
import itertools
permi=itertools.permutations(['0','1','2','3','4','5','6','7','8','9'])


#alist=[int(''.join(x)) for x in permi]

#print(alist[999999])
	
	
'''Problem 25
What is the index of the first term in the Fibonacci sequence to contain 1000 digits?
'''

def fibindex(index):
	fibgen=myfibgen()
	fibval = next(fibgen)
	idx = 2
	while len(str(fibval))<index:
		fibval=next(fibgen)
		idx+=1
	return idx
	
#print(fibindex(1000))

'''Problem 26
Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.
'''

